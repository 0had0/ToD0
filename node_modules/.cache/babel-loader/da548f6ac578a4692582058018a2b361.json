{"ast":null,"code":"import _slicedToArray from \"/home/hadi/Documents/projects/dump/my-portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/hadi/Documents/projects/dump/my-portfolio/src/App.js\";\nimport React from 'react';\nimport '../node_modules/@material-ui/core/umd/material-ui.development.js';\nimport '../node_modules/@material-ui/core/umd/material-ui.production.min.js';\nimport './App.css';\nimport Show from './components/show';\nimport Nav from './components/nav';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: theme.spacing(3, 2),\n    backgroundColor: '#607d8b',\n    color: 'white'\n  },\n  formControl: {\n    margin: theme.spacing(1)\n  }\n}));\n\nconst App = props => {\n  const _React$useState = React.useState(false),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        open = _React$useState2[0],\n        setOpen = _React$useState2[1];\n\n  const _React$useState3 = React.useState(0),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        labelWidth = _React$useState4[0],\n        setLabelWidth = _React$useState4[1];\n\n  const _React$useState5 = React.useState('Title'),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        name = _React$useState6[0],\n        setName = _React$useState6[1];\n\n  const labelRef = React.useRef(null);\n  const classes = useStyles();\n  React.useEffect(() => {\n    setLabelWidth(labelRef.current.offsetWidth);\n  }, []);\n\n  const handleChange = event => {\n    setName(event.target.value);\n  };\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(Nav, {\n    handleOpen: handleOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }), React.createElement(Show, {\n    store: props.store,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), React.createElement(Dialog, {\n    open: open,\n    onClose: handleClose,\n    \"aria-labelledby\": \"alert-dialog-title\",\n    \"aria-describedby\": \"alert-dialog-description\",\n    minWidth: \"md\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    id: \"alert-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"Adding new item\"), React.createElement(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(DialogContentText, {\n    id: \"alert-dialog-description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    className: classes.formControl,\n    variant: \"outlined\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(InputLabel, {\n    ref: labelRef,\n    htmlFor: \"component-outlined\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"Title\"), React.createElement(OutlinedInput, {\n    id: \"component-outlined\",\n    value: name,\n    onChange: handleChange,\n    labelWidth: labelWidth,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  })), React.createElement(FormControl, {\n    className: classes.formControl,\n    variant: \"outlined\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(InputLabel, {\n    ref: labelRef,\n    htmlFor: \"component-outlined\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"Text\"), React.createElement(OutlinedInput, {\n    id: \"component-outlined\",\n    value: name,\n    multiline: true,\n    onChange: handleChange,\n    labelWidth: labelWidth,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  })))), React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: handleClose,\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"Cancel\"), React.createElement(Button, {\n    onClick: handleClose,\n    color: \"primary\",\n    autoFocus: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"ADD\"))));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/hadi/Documents/projects/dump/my-portfolio/src/App.js"],"names":["React","Show","Nav","makeStyles","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","Button","useStyles","theme","root","padding","spacing","backgroundColor","color","formControl","margin","App","props","useState","open","setOpen","labelWidth","setLabelWidth","name","setName","labelRef","useRef","classes","useEffect","current","offsetWidth","handleChange","event","target","value","handleOpen","handleClose","store"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport '../node_modules/@material-ui/core/umd/material-ui.development.js';\nimport '../node_modules/@material-ui/core/umd/material-ui.production.min.js';\n\nimport './App.css';\nimport Show from './components/show';\nimport Nav from './components/nav';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\n\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        padding: theme.spacing(3, 2),\n        backgroundColor: '#607d8b',\n        color: 'white'\n    },\n    formControl: {\n        margin: theme.spacing(1)\n    }\n}));\nconst App = props => {\n    const [open, setOpen] = React.useState(false);\n    const [labelWidth, setLabelWidth] = React.useState(0);\n    const [name, setName] = React.useState('Title');\n    const labelRef = React.useRef(null);\n    const classes = useStyles();\n\n    React.useEffect(() => {\n        setLabelWidth(labelRef.current.offsetWidth);\n    }, []);\n\n    const handleChange = event => {\n        setName(event.target.value);\n    };\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n    return (\n        <div className=\"App\">\n            <Nav handleOpen={handleOpen}/>\n            <Show store={\n                props.store\n            }/>\n            <Dialog open={open}\n                onClose={handleClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n                minWidth='md'>\n                <DialogTitle id=\"alert-dialog-title\">\n                    {\"Adding new item\"}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        <FormControl className={\n                                classes.formControl\n                            }\n                            variant=\"outlined\">\n                            <InputLabel ref={labelRef}\n                                htmlFor=\"component-outlined\">\n                                Title\n                            </InputLabel>\n                            <OutlinedInput id=\"component-outlined\"\n                                value={name}\n                                onChange={handleChange}\n                                labelWidth={labelWidth}/>\n                        </FormControl>\n                        <FormControl className={\n                                classes.formControl\n                            }\n                            variant=\"outlined\">\n                            <InputLabel ref={labelRef}\n                                htmlFor=\"component-outlined\">\n                                Text\n                            </InputLabel>\n                            <OutlinedInput id=\"component-outlined\"\n                                value={name} multiline\n                                onChange={handleChange}\n                                labelWidth={labelWidth}/>\n                        </FormControl>\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose}\n                        color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleClose}\n                        color=\"primary\"\n                        autoFocus>\n                        ADD\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}